version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: ${PROJECT_NAME}-mongodb
    restart: always
    ports:
      - "${MONGODB_EXPOSE}:${MONGODB_PORT}"
    volumes:
      - mongodb_data:/data/db
    networks:
      - consult_net
    command: mongod --port ${MONGODB_PORT}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "${MONGODB_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis service for caching
  redis:
    image: redis:alpine
    container_name: ${PROJECT_NAME}-redis
    restart: always
    ports:
      - "${REDIS_EXPOSE}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    command: --port ${REDIS_PORT}
    networks:
      - consult_net
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # RabbitMQ for message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${PROJECT_NAME}-rabbitmq
    restart: always
    ports:
      - "${RABBITMQ_EXPOSE_1}:${RABBITMQ_PORT_1}"
      - "${RABBITMQ_EXPOSE_2}:${RABBITMQ_PORT_2}"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/main.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - consult_net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: ${PROJECT_NAME}-backend
    restart: always
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGO_URI=mongodb://mongodb:${MONGODB_PORT}/${MONGO_DATABASE}
      - REDIS_URI=redis://redis:${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - RABBITMQ_URI=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:${RABBITMQ_PORT_1}
      - FRONTEND_URL=${PROJECT_URL}
      - API_URL=${PROJECT_URL}/api
      - DEFAULT_LOCALE=${DEFAULT_LOCALE:-en}
      - SUPPORTED_LOCALES=${SUPPORTED_LOCALES:-en,ru,uz}
      - LOCALIZATION_FALLBACK=${LOCALIZATION_FALLBACK:-en}
    env_file:
      - ./.env
    ports:
      - "${BACKEND_EXPOSE}:${BACKEND_PORT}"
    volumes:
      - ./localization/locales:/app/locales:ro
    networks:
      - consult_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${BACKEND_PORT}/api/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend service (production)
  frontend-prod:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile.prod
    container_name: ${PROJECT_NAME}-frontend
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - VITE_SOCKET_URL=${API_URL}
      - VUE_APP_API_URL=${PROJECT_URL}/api
      - VUE_APP_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - VUE_APP_DEFAULT_LOCALE=${DEFAULT_LOCALE:-en}
      - VUE_APP_SUPPORTED_LOCALES=${SUPPORTED_LOCALES:-en,ru,uz}
    ports:
      - "${FRONTEND_EXPOSE}:80"
    volumes:
      - ./localization/locales:/app/src/localization/locales:ro
    networks:
      - consult_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  backend_logs:

networks:
  consult_net:
    driver: bridge